// Generated by CIRCT firtool-1.44.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module Fetch(	// @[<stdin>:3:10]
  input         clock,	// @[<stdin>:4:11]
                reset,	// @[<stdin>:5:11]
  input  [31:0] io_instSRAM_rdata,	// @[playground/src/core/Fetch.scala:15:14]
  output [31:0] io_instSRAM_addr,	// @[playground/src/core/Fetch.scala:15:14]
                io_pc,	// @[playground/src/core/Fetch.scala:15:14]
                io_inst	// @[playground/src/core/Fetch.scala:15:14]
);

  reg [31:0] pc;	// @[playground/src/core/Fetch.scala:17:19]
  always @(posedge clock) begin	// @[<stdin>:4:11]
    if (reset)	// @[<stdin>:4:11]
      pc <= 32'h0;	// @[playground/src/core/Fetch.scala:17:19]
    else	// @[<stdin>:4:11]
      pc <= pc + 32'h4;	// @[playground/src/core/Fetch.scala:17:19, :19:12]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// @[<stdin>:3:10]
    `ifdef FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_BEFORE_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:0];	// @[<stdin>:3:10]
    initial begin	// @[<stdin>:3:10]
      `ifdef INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
        `INIT_RANDOM_PROLOG_	// @[<stdin>:3:10]
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// @[<stdin>:3:10]
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// @[<stdin>:3:10]
        pc = _RANDOM[/*Zero width*/ 1'b0];	// @[<stdin>:3:10, playground/src/core/Fetch.scala:17:19]
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
      `FIRRTL_AFTER_INITIAL	// @[<stdin>:3:10]
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_instSRAM_addr = pc;	// @[<stdin>:3:10, playground/src/core/Fetch.scala:17:19]
  assign io_pc = pc;	// @[<stdin>:3:10, playground/src/core/Fetch.scala:17:19]
  assign io_inst = io_instSRAM_rdata;	// @[<stdin>:3:10]
endmodule

module ImmGen(	// @[<stdin>:35:10]
  input  [2:0]  io_instType,	// @[playground/src/core/ImmGen.scala:7:14]
  input  [31:0] io_inst,	// @[playground/src/core/ImmGen.scala:7:14]
  output [31:0] io_imm	// @[playground/src/core/ImmGen.scala:7:14]
);

  assign io_imm = {20'h0, io_instType == 3'h1 ? io_inst[31:20] : 12'h0};	// @[<stdin>:35:10, playground/src/core/ImmGen.scala:13:{10,16,29,48}]
endmodule

module ControlGen(	// @[<stdin>:45:10]
  input  [6:0] io_op,	// @[playground/src/core/ControlGen.scala:11:14]
  output [2:0] io_controlBundle_instType	// @[playground/src/core/ControlGen.scala:11:14]
);

  assign io_controlBundle_instType = {2'h0, io_op != 7'h33};	// @[<stdin>:45:10, playground/src/core/ControlGen.scala:18:34, :23:35]
endmodule

module Decoder(	// @[<stdin>:63:10]
  input  [31:0] io_inst,	// @[playground/src/core/Decoder.scala:21:14]
                io_pc,	// @[playground/src/core/Decoder.scala:21:14]
  output [31:0] io_debug_debugPC,	// @[playground/src/core/Decoder.scala:21:14]
  output        io_debug_debugHalt	// @[playground/src/core/Decoder.scala:21:14]
);

  wire [2:0]  _controlGen_io_controlBundle_instType;	// @[playground/src/core/Decoder.scala:25:26]
  wire [31:0] _immGen_io_imm;	// @[playground/src/core/Decoder.scala:24:26]
  ImmGen immGen (	// @[playground/src/core/Decoder.scala:24:26]
    .io_instType (_controlGen_io_controlBundle_instType),	// @[playground/src/core/Decoder.scala:25:26]
    .io_inst     (io_inst),
    .io_imm      (_immGen_io_imm)
  );
  ControlGen controlGen (	// @[playground/src/core/Decoder.scala:25:26]
    .io_op                     (io_inst[6:0]),	// @[playground/src/core/Decoder.scala:27:23]
    .io_controlBundle_instType (_controlGen_io_controlBundle_instType)
  );
  assign io_debug_debugPC = io_pc;	// @[<stdin>:63:10]
  assign io_debug_debugHalt = io_inst[6:0] == 7'h73 & _immGen_io_imm == 32'h1;	// @[<stdin>:63:10, playground/src/core/Decoder.scala:24:26, :27:23, :49:{33,50,67}]
endmodule

module CPUTop(	// @[<stdin>:112:10]
  input         clock,	// @[<stdin>:113:11]
                reset,	// @[<stdin>:114:11]
  input  [31:0] io_instSRAM_rdata,	// @[playground/src/core/CPUTop.scala:9:14]
  output        io_instSRAM_en,	// @[playground/src/core/CPUTop.scala:9:14]
  output [3:0]  io_instSRAM_we,	// @[playground/src/core/CPUTop.scala:9:14]
  output [31:0] io_instSRAM_addr,	// @[playground/src/core/CPUTop.scala:9:14]
                io_instSRAM_wdata,	// @[playground/src/core/CPUTop.scala:9:14]
                io_debug_debugPC,	// @[playground/src/core/CPUTop.scala:9:14]
  output        io_debug_debugHalt	// @[playground/src/core/CPUTop.scala:9:14]
);

  wire [31:0] _fetch_io_pc;	// @[playground/src/core/CPUTop.scala:14:23]
  wire [31:0] _fetch_io_inst;	// @[playground/src/core/CPUTop.scala:14:23]
  Fetch fetch (	// @[playground/src/core/CPUTop.scala:14:23]
    .clock             (clock),
    .reset             (reset),
    .io_instSRAM_rdata (io_instSRAM_rdata),
    .io_instSRAM_addr  (io_instSRAM_addr),
    .io_pc             (_fetch_io_pc),
    .io_inst           (_fetch_io_inst)
  );
  Decoder decode (	// @[playground/src/core/CPUTop.scala:15:23]
    .io_inst            (_fetch_io_inst),	// @[playground/src/core/CPUTop.scala:14:23]
    .io_pc              (_fetch_io_pc),	// @[playground/src/core/CPUTop.scala:14:23]
    .io_debug_debugPC   (io_debug_debugPC),
    .io_debug_debugHalt (io_debug_debugHalt)
  );
  assign io_instSRAM_en = 1'h1;	// @[<stdin>:112:10, playground/src/core/CPUTop.scala:14:23]
  assign io_instSRAM_we = 4'hF;	// @[<stdin>:112:10, playground/src/core/CPUTop.scala:14:23]
  assign io_instSRAM_wdata = 32'h0;	// @[<stdin>:112:10, playground/src/core/CPUTop.scala:14:23]
endmodule

